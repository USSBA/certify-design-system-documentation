/*
Display/Visibility

Use the `display` and `visibility` utility classes to show and hide elements.

Style guide: utilities.display-visibility
*/

/*
Display

> The display CSS property specifies the type of rendering box used for an element. In HTML, default display property values are taken from behaviors described in the HTML specifications or from the browser/user default stylesheet. &mdash; [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/display)

**Format**: `sba-u-display--[VALUE]`

#### Available `display` utilities:

- `sba-u-display--block`
- `sba-u-display--inline-block`
- `sba-u-display--flex`
- `sba-u-display--none`

Markup:
<% ['sba-u-display--block',
  'sba-u-display--inline-block',
  'sba-u-display--flex',
  'sba-u-display--none'].forEach(util => { -%>
<p class="<%= util %> ds-base--inverse sba-u-padding--2"><%= util %></p>
<% }) %>

Style guide: utilities.display-visibility.display
*/
.sba-u-display--block {
  display: block !important;
}

.sba-u-display--inline-block {
  display: inline-block !important;
}

.sba-u-display--flex {
  display: flex !important;
}

.sba-u-display--none {
  display: none !important;
}

/*
Visibility

> The visibility property can be used to hide an element while leaving the space where it would have been. &mdash; [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/visibility)

**Format**: `sba-u-visibility--[VALUE]`

#### Available `visibility` utilities:

- `sba-u-visibility--hidden`
- `sba-u-visibility--visible`
- `sba-u-visibility--screen-reader`

#### Accessibility

There may be times when you want to hide an element, but still want its text to be read by a screen reader. The `sba-u-visibility--screen-reader` class will hide the content visually, but provide the content to screen readers.

Markup:
<span class="sba-u-visibility--hidden">I'm hidden</span>
<span class="sba-u-visibility--screen-reader">I'm visible to screen readers only</span>
<span class="sba-u-visibility--visible">I'm visible</span>

Style guide: utilities.display-visibility.visibility
*/
.sba-u-visibility--hidden {
  visibility: hidden !important;
}

.sba-u-visibility--visible {
  visibility: visible !important;
}

.sba-u-visibility--screen-reader {
  border: 0;
  clip: rect(0, 0, 0, 0);
  height: 1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  // Workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=1241631
  word-wrap: normal;
}

/*
Toggling visibility by breakpoint

@responsive

Use a [breakpoint prefix]({{root}}/guidelines/responsive) to show/hide content at specific breakpoints.

A breakpoint prefix is supported on all of the utility classes mentioned above, except for `sba-u-visibility--screen-reader`.

Markup:
<% ['sm', 'md', 'lg', 'xl'].forEach(breakpoint => { %>
  <div class="sba-u-<%= breakpoint %>-display--none sba-u-color--muted">
    Hidden on <%= breakpoint %> screens and larger
  </div>
  <div class="sba-u-<%= breakpoint %>-display--block">
    Displayed as block on <%= breakpoint %> screens and larger
  </div>
  <div class="sba-u-<%= breakpoint %>-visibility--hidden sba-u-color--muted">
    Invisible on <%= breakpoint %> screens and larger
  </div>
  <div class="sba-u-<%= breakpoint %>-visibility--visible">
    Visible on <%= breakpoint %> screens and larger
  </div>
<% }) %>

Style guide: utilities.display-visibility.responsive
*/
@each $breakpoint in map-keys($breakpoints) {
  $value: map-get($breakpoints, $breakpoint);

  @media (min-width: $value) {
    .sba-u-#{$breakpoint}-display--block {
      display: block !important;
    }

    .sba-u-#{$breakpoint}-display--inline-block {
      display: inline-block !important;
    }

    .sba-u-#{$breakpoint}-display--none {
      display: none !important;
    }

    .sba-u-#{$breakpoint}-visibility--hidden {
      visibility: hidden !important;
    }

    .sba-u-#{$breakpoint}-visibility--visible {
      visibility: visible !important;
    }
  }
}
